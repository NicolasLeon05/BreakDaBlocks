Nico Leon:
>Aspectos generales:
- Deja espacio entre la declaración de funciones cuando las funcionalidades sean diferentes. Por ejemplo: Si Tenes chequeo de colisiones, ponelas todas juntas y recien ahi separas.
>Constantes
- Cambiar los #define de colores por funciones/enums/structs
- Por mas que los bloques tengan su tamaño, es mejor ponerlo como lo que tenes en el comentario: screenWidth/12 y no 106
>Usa namespace, para encapsular el codigo y darle una estructura un poco mas ordenada.
>Game.cpp
- Podrias añadir una función deinit, sobre todo, para cuando tengas que descargar imagenes ademas de hacer el slClose.
>Scene_Gameplay
- Trata de meter un Deinit siempre. Nunca sabes cuando vas a usar algun recurso que necesite (des)cargarse
- Para evitar usar el nombre gameplay en cada uno de los metodos, usa namespace. Te va a quedar Gameplay.Init(), Gameplay.Update(), Gameplay.Draw() y Gameplay.Deinit().
- Cuando un if es muy largo, podes optar por separar las condiciones en booleanas y chequear las condiciones en el if. O bien, mantener la misma indentación que la primer condición.
- Funcion: CheckBlockDestruction. Esta funcion es carisima, sobre todo, si vas a ejecutarla todos los frames. Por eso, para optimizarla, habria que preguntar, antes de hacer el if de colisión, si desde ya, el bloque ya está destruido e ignorarlo.
>Ball.h
- Se estila poner las constantes todas juntas lo mas arriba como el scope lo permita.
>Block.cpp
- Por mas que sea util a nivel codigo, se ven rarisimos los defines puestos de esa forma.
